"""
Test code of bot to Telegram from https://www.youtube.com/watch?v=M8fhrtvedHA&t=620s
https://core.telegram.org/bots/api - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

https://github.com/limepillX/anon_questions_bot?ysclid=m7eb1wox8s530914684

Test5MasaBot
"""
#pip install pyTelegramBotAPI - v 4.1.0
#config - import config.py
import telebot
import config
import json
import datetime as dt

#–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
import random
from telebot import types


def read_id_or_api_key(file_path):
    with open(file_path, 'r+') as f:
        key = f.readline().strip()
        assert key
        print(f'Got {file_path.split("/")[-1]}')
    return key



#bot = telebot.TeleBot(config.TOKEN)
path = 'D:/PYTHON/Programms/bot_config/input/'
API_KEY = read_id_or_api_key(path + 'API_KEY')
TEACHER_ID = int(read_id_or_api_key(path + 'teacher_id'))

bot = telebot.TeleBot(API_KEY)

@bot.message_handler(commands = ['start'])
def welcome(message):
    #–ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ (/start)
    sti = open('static/AnimatedSticker.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti)

    #keyboard
    #–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é. resize_keyboard - –º–∞–ª–µ–Ω—å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    #–ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    item1 = types.KeyboardButton("4Ô∏è‚É£ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üëã –ö–∞–∫ –¥–µ–ª–∞?")

    markup.add(item1, item2)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, "
                                      "–±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.".format(message.from_user,
                                                                                             bot.get_me()),
                     parse_mode='html', #—Ä–∞–∑–º–µ—Ç–∫–∞ html
                     reply_markup=markup #–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                     )



@bot.message_handler(content_types = ['text'])
def lalala(message):
    #–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ö–æ-–±–æ—Ç–∞
    #bot.send_message(message.chat.id, message.text)
    #–ê–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if message.chat.type == 'private':
        if message.text == '4Ô∏è‚É£ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0,100)))
        elif message.text == 'üëã –ö–∞–∫ –¥–µ–ª–∞?':

            #–í—Ç–æ—Ä–æ–π —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∏–Ω–ª–∞–π–Ω–æ–≤–∞—è)
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        else:
            if len(message.text) > 500:
                bot.reply_to(message,
                             '–ü—Ä–æ—Å—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.')
                return

            answer = f"""–•–æ—Ä–æ—à–æ, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: "{message.text}"
            –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω. –ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å.üôÉ"""

            print(f'\nGot new question: "{message.text}"')

            bot.send_message(chat_id=TEACHER_ID, text=f'‚ùó–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, "{message.text}"')

            try:
                message.text.encode(encoding='utf-8')
            except UnicodeEncodeError:
                print('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π.')
                bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —É–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã –∏ —Å–º–∞–π–ª–∏–∫–∏')
                return

            try:
                file_data['number_of_questions'] += 1
            except:
                file_data['number_of_questions'] = 1

            file_data[str(file_data['number_of_questions'])] = {
                'date': str(dt.datetime.now().date()),
                'time': str(dt.datetime.now().time())[:-10],
                'text': message.text
            }

            write_to_file(file_data)
            bot.reply_to(message, answer)

            #bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ‚òù, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–æ—Å–ª–∞–Ω —á–µ–ª–æ–≤–µ–∫—É')

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç –∏ —Ö—É–∂–µ')

            #remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üëã –ö–∞–∫ –¥–µ–ª–∞?", reply_markup=None)

            #–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            bot.answer_callback_query(chat_id=call.message.chat.id, show_alert=False, text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

    except Exception as e:
        print(repr(e))


def read_file():
    with open('output/questions.json', 'r', encoding='utf-8') as f:
        try:
            data = json.loads(f.read())
            print('Content loaded from json')
        except json.JSONDecodeError:
            print('Questions file is empty, filling...')
            write_to_file({"number_of_questions": 0})
            data = read_file()

    return data

def write_to_file(data):
    with open('output/questions.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(data, ensure_ascii=False, indent=2))
        print(f'Content written in json\n')


if __name__ == '__main__':
    file_data = read_file()
    #BOT.infinity_polling(timeout=5)
    #RUN
    bot.polling(none_stop=True)

